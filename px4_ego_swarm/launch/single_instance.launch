<?xml version="1.0"?>
<launch>
    <!-- size of map, change the size inflate x, y, z according to your application -->
    <arg name="map_size_x" default="50.0"/>
    <arg name="map_size_y" default="50.0"/>
    <arg name="map_size_z" default="10.0"/>
    <arg name="init_x" default="0.0"/>
    <arg name="init_y" default="0.0"/>
    <arg name="init_z" default="0.0"/>
    <arg name="target_x" default="0.0"/>
    <arg name="target_y" default="0.0"/>
    <arg name="target_z" default="0.0"/>

    <arg name="drone_id" default="0"/>

    <!-- topic of your odometry such as VIO or LIO -->
    <arg name="odometry_topic" default="drone0/mavros/local_position/odom"/>
    <arg name="camera_pose_topic" default="drone0/camera/pose"/>
    <arg name="depth_topic" default="drone0/camera/depth/image_raw"/>
    <arg name="cloud_topic" default="drone0/camera/depth/color/points"/>

    <arg name="cx" default="321.04638671875"/>
    <arg name="cy" default="243.44969177246094"/>
    <arg name="fx" default="387.229248046875"/>
    <arg name="fy" default="387.229248046875"/>

    <arg name="max_vel" default="2.0"/>
    <arg name="max_acc" default="3.0"/>
    <arg name="planning_horizon" default="7.5"/>

    <!-- Initial drone's position in Gazebo -->
    <arg name="init_pos_x" default="5.0" />
    <arg name="init_pos_y" default="0.0" />
    <!-- takeoff height -->
    <arg name="takeoff_height" default="1.0" />

    <arg name="point_num" default="0"/>
    <arg name="point0_x" default="-1.0"/>
    <arg name="point0_y" default="-1.0"/>
    <arg name="point0_z" default="-1.0"/>

    <arg name="flight_type" default="1"/> <!-- 1: use 2D Nav Goal to select goal  2: use global waypoints -->
    <arg name="use_distinctive_trajs" default="true"/>

    <arg name="obj_num_set" default="0"/>

    <arg name="use_geo_controller" default="false" />

    <!-- main algorithm params -->
    <include file="$(find px4_ego_swarm)/launch/advanced_param.xml">

        <arg name="drone_id" value="$(arg drone_id)"/>

        <arg name="map_size_x_" value="$(arg map_size_x)"/>
        <arg name="map_size_y_" value="$(arg map_size_y)"/>
        <arg name="map_size_z_" value="$(arg map_size_z)"/>
        <arg name="odometry_topic" value="$(arg odometry_topic)"/>

        <arg name="obj_num_set" value="$(arg obj_num_set)" />

        <!-- camera pose: transform of camera frame in the world frame -->
        <!-- depth topic: depth image, 640x480 by default -->
        <!-- don't set cloud_topic if you already set these ones! -->
        <arg name="camera_pose_topic" value="$(arg camera_pose_topic)"/>
        <arg name="depth_topic" value="$(arg depth_topic)"/>

        <!-- topic of point cloud measurement, such as from LIDAR  -->
        <!-- don't set camera pose and depth, if you already set this one! -->
        <arg name="cloud_topic" value="$(arg cloud_topic)"/>

        <!-- intrinsic params of the depth camera -->
        <arg name="cx" value="$(arg cx)"/>
        <arg name="cy" value="$(arg cy)"/>
        <arg name="fx" value="$(arg fx)"/>
        <arg name="fy" value="$(arg fy)"/>

        <!-- maximum velocity and acceleration the drone will reach -->
        <arg name="max_vel" value="$(arg max_vel)"/>
        <arg name="max_acc" value="$(arg max_acc)"/>

        <!--always set to 1.5 times grater than sensing horizen-->
        <arg name="planning_horizon" value="$(arg planning_horizon)"/>

        <arg name="use_distinctive_trajs" value="$(arg use_distinctive_trajs)"/>

        <!-- 1: use 2D Nav Goal to select goal  -->
        <!-- 2: use global waypoints below  -->
        <arg name="flight_type" value="$(arg flight_type)"/>

        <!-- global waypoints -->
        <!-- It generates a piecewise min-snap traj passing all waypoints -->
        <arg name="point_num" value="$(arg point_num)"/>

    </include>

    <!-- trajectory server -->
    <node pkg="ego_planner" name="drone_$(arg drone_id)_traj_server" type="traj_server" output="screen">
        <remap from="position_cmd" to="drone_$(arg drone_id)_planning/pos_cmd"/>
        <remap from="~planning/bspline" to="drone_$(arg drone_id)_planning/bspline"/>

        <param name="traj_server/time_forward" value="1.5" type="double"/>
    </node>

    <!-- Geometric controller -->
    <include file="$(find px4_ego_swarm)/launch/geometric_controller.launch">
        <arg name="gazebo_simulation" value="false" />
        <arg name="max_acc" value="$(arg max_acc)" />
        <param name="Kp_x" value="6.0" />
        <param name="Kp_y" value="6.0" />
        <param name="Kp_z" value="10.0" />
        <param name="Kv_x" value="1.5" />
        <param name="Kv_y" value="1.5" />
        <param name="Kv_z" value="3.5" />
        <arg name="init_pos_x" value="0.0" />
        <arg name="init_pos_y" value="0.0" />
        <arg name="init_pos_z" value="$(arg takeoff_height)" />
    </include>

    <node pkg="px4_ego_swarm" name="traj_msg_converter" type="trajectory_msg_converter.py" output="screen">
        <param name="ego_planner_traj_topic" value="drone_$(arg drone_id)_planning/pos_cmd"/>
        <param name="traj_pub_topic" value="command/trajectory"/>
    </node>

    <node unless="$(arg use_geo_controller)" pkg="px4_ego_swarm" name="offboard_node" type="offboard_node.py" output="screen"> </node>

    <!-- use simulator -->
    <include file="$(find px4_ego_swarm)/launch/simulator.xml">

        <arg name="drone_id" value="$(arg drone_id)"/>

        <arg name="map_size_x_" value="$(arg map_size_x)"/>
        <arg name="map_size_y_" value="$(arg map_size_y)"/>
        <arg name="map_size_z_" value="$(arg map_size_z)"/>

        <arg name="init_x_" value="$(arg init_x)"/>
        <arg name="init_y_" value="$(arg init_y)"/>
        <arg name="init_z_" value="$(arg init_z)"/>

        <arg name="odometry_topic" value="$(arg odometry_topic)"/>
    </include>

</launch>
